from datetime import date, datetime, timedelta
from enum import Enum
from typing import Any, Iterable, Literal, Union

class Unit(Enum):
    MICROSECONDS: int = ...
    MILLISECONDS: int = ...
    SECONDS: int = ...
    MINUTES: int = ...
    HOURS: int = ...
    DAYS: int = ...
    MONTHS: int = ...
    YEARS: int = ...
    def __lt__(self, other: Any) -> Any: ...

def naturaldelta(
    value: Union[timedelta, int],
    months: bool = ...,
    minimum_unit: Literal["seconds", "milliseconds", "microseconds"] = ...
) -> str: ...

def naturaltime(
    value: Union[datetime, int],
    future: bool = ...,
    months: bool = ...,
    minimum_unit: Literal["seconds", "milliseconds", "microseconds"] = ...
) -> str: ...

def naturalday(
    value: Union[date, datetime],
    format: str = ...
) -> str: ...

def naturaldate(value: Union[date, datetime]) -> str: ...

def precisedelta(
    value: Union[timedelta, int],
    minimum_unit: Literal["microseconds", "milliseconds", "seconds", "minutes", "hours", "days", "months", "years"] = ...,
    suppress: Iterable[Literal["microseconds", "milliseconds", "seconds", "minutes", "hours", "days", "months", "years"]] = ...,
    format: str = ...
) -> str: ...
